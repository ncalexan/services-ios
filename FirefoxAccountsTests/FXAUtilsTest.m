// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/


#import <XCTest/XCTest.h>
#import "FXAUtils.h"

@interface FXAUtilsTest : XCTestCase

@end

@implementation FXAUtilsTest

- (void) testQuickStretchPassword
{
    unsigned char expected[] = {
        0x23, 0x22, 0xd2, 0x0a, 0x58, 0xa6, 0x7b, 0xfe, 0x5f, 0xc2, 0x81, 0x4c, 0xcc, 0xde, 0xc7, 0x0e, 0x1d, 0xfd, 0xd9, 0x79, 0xc1, 0xdc, 0xb6, 0xdc, 0x55, 0x2a, 0x75, 0x03, 0x78, 0x5c, 0x5f, 0xeb
    };
    
    XCTAssertEqualObjects(
        [FXAUtils quickStretchPassword: @"TODO" email: @"TODO"],
        [NSData dataWithBytes: expected length: sizeof expected]
    );
}

- (void) testDeriveUnwrapBKeyFromStretchedPassword
{
    unsigned char quickStretchedPassword[] = {
        0x23, 0x22, 0xd2, 0x0a, 0x58, 0xa6, 0x7b, 0xfe, 0x5f, 0xc2, 0x81, 0x4c, 0xcc, 0xde, 0xc7, 0x0e, 0x1d, 0xfd, 0xd9, 0x79, 0xc1, 0xdc, 0xb6, 0xdc, 0x55, 0x2a, 0x75, 0x03, 0x78, 0x5c, 0x5f, 0xeb
    };
    
    unsigned char expected[] = {
        0x31, 0xaa, 0x81, 0x88, 0xf8, 0x90, 0x60, 0xa7, 0xb0, 0x24, 0x2d, 0x2c, 0x7e, 0x09, 0x84, 0x28, 0x57, 0xc8, 0x2e, 0x42, 0xac, 0x08, 0x7c, 0xae, 0x68, 0x05, 0x7f, 0x28, 0x82, 0xcd, 0x8d, 0x83
    };
    
    XCTAssertEqualObjects(
        [FXAUtils deriveUnwrapBKeyFromQuickStretchedPassword: [NSData dataWithBytes: quickStretchedPassword length: sizeof quickStretchedPassword]],
        [NSData dataWithBytes: expected length: sizeof expected]
    );
}

- (void) testDeriveTokenTriplet
{
    unsigned char sessionToken[] = { 0xe6, 0x7e, 0x3d, 0xd1, 0x54, 0x92, 0x69, 0x83, 0x10, 0xb5, 0xc1, 0xd5, 0xd3, 0x25, 0x9c, 0x93, 0xb4, 0x4a, 0xcf, 0xce, 0x1d, 0x4d, 0x94, 0x4c, 0xdd, 0x30, 0x4e, 0x2c, 0x54, 0xbb, 0x43, 0xb8 };

    unsigned char expectedTokenId[] = { 0x17, 0x05, 0xc2, 0x4d, 0x98, 0x16, 0xcb, 0xd6, 0x50, 0x68, 0xa1, 0xdc, 0xd7, 0x5e, 0xed, 0xee, 0x06, 0xcd, 0xaf, 0xd9, 0x7d, 0x4d, 0xfa, 0xaf, 0x81, 0x64, 0x7b, 0x22, 0xf6, 0x0a, 0x88, 0x5e };
    unsigned char expectedRequestHMACKey[] = { 0xfa, 0xf2, 0xd7, 0x4a, 0x00, 0x05, 0x8c, 0x9d, 0x7f, 0x3d, 0x9e, 0xb5, 0x83, 0x22, 0xa3, 0x63, 0xcd, 0x96, 0x4e, 0xef, 0xf1, 0x6b, 0x00, 0xba, 0x86, 0xf5, 0x08, 0xdb, 0xda, 0xa6, 0x8d, 0x84 };
    unsigned char expectedRequestKey[] = { 0x44, 0xe2, 0xd0, 0xf0, 0x7c, 0x8a, 0x25, 0x3c, 0x79, 0x93, 0xe8, 0x29, 0x9f, 0x19, 0x09, 0xa2, 0x66, 0xbd, 0xbf, 0x2b, 0xb6, 0x59, 0xdb, 0x9d, 0xd8, 0xe1, 0x70, 0xdf, 0x06, 0xeb, 0xc2, 0xf0 };

    FXARequestTokenTriplet *tokenTriplet = [FXAUtils deriveRequestTokenTripletFromToken: [NSData dataWithBytes: sessionToken length: sizeof sessionToken] name: @"sessionToken"];
    XCTAssertNotNil(tokenTriplet);
    
    XCTAssertEqualObjects(
        tokenTriplet.tokenId,
        [NSData dataWithBytes: expectedTokenId length: sizeof expectedTokenId]
    );

    XCTAssertEqualObjects(
        tokenTriplet.requestHMACKey,
        [NSData dataWithBytes: expectedRequestHMACKey length: sizeof expectedRequestHMACKey]
    );

    XCTAssertEqualObjects(
        tokenTriplet.requestKey,
        [NSData dataWithBytes: expectedRequestKey length: sizeof expectedRequestKey]
    );
}

- (void) testComputeClientState
{
    unsigned char key[] = { 0xfd, 0x5c, 0x74, 0x78, 0x06, 0xc0, 0x7c, 0xe0, 0xb9, 0xd6, 0x9d, 0xcf, 0xea, 0x14, 0x46, 0x63, 0xe6, 0x30, 0xb6, 0x5e, 0xc4, 0x96, 0x35, 0x96, 0xa2, 0x2f, 0x24, 0x91, 0x0d, 0x7d, 0xd1, 0x5d };

    NSString *expectedClientState = @"6ae94683571c7a7c54dab4700aa3995f";

    NSString *clientState = [FXAUtils computeClientState: [NSData dataWithBytes: key length: sizeof key]];
    
    XCTAssertEqualObjects(
        clientState,
        expectedClientState
    );
}

@end
