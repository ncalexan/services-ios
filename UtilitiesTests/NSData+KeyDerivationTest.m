// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/


#import <XCTest/XCTest.h>

#import "NSData+Base16.h"
#import "NSData+KeyDerivation.h"

@interface NSData_KeyDerivationTest : XCTestCase

@end

@implementation NSData_KeyDerivationTest

#pragma mark - HDKFSHA256

// Taken from http://tools.ietf.org/html/rfc5869

- (void) testHDKFSHA256TestVector1
{
    unsigned char ikm[] = {0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b};
    unsigned char salt[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c};
    unsigned char info[] = {0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9};
    unsigned char okm[] = {0x3c,0xb2,0x5f,0x25,0xfa,0xac,0xd5,0x7a,0x90,0x43,0x4f,0x64,0xd0,0x36,0x2f,0x2a,0x2d,0x2d,0x0a,0x90,0xcf,0x1a,0x5a,0x4c,0x5d,0xb0,0x2d,0x56,0xec,0xc4,0xc5,0xbf,0x34,0x00,0x72,0x08,0xd5,0xb8,0x87,0x18,0x58,0x65};
    NSUInteger length = 42;
    
    XCTAssertEqualObjects(
        [[NSData dataWithBytes: ikm length: sizeof ikm] deriveHKDFSHA256KeyWithSalt: [NSData dataWithBytes: salt length: sizeof salt] contextInfo: [NSData dataWithBytes: info length: sizeof info] length: length],
        [NSData dataWithBytes: okm length: sizeof okm]
    );
}

- (void) testHDKFSHA256TestVector2
{
    unsigned char ikm[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f};
    unsigned char salt[] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf};
    unsigned char info[] = {0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff};
    unsigned char okm[] = {0xb1,0x1e,0x39,0x8d,0xc8,0x03,0x27,0xa1,0xc8,0xe7,0xf7,0x8c,0x59,0x6a,0x49,0x34,0x4f,0x01,0x2e,0xda,0x2d,0x4e,0xfa,0xd8,0xa0,0x50,0xcc,0x4c,0x19,0xaf,0xa9,0x7c,0x59,0x04,0x5a,0x99,0xca,0xc7,0x82,0x72,0x71,0xcb,0x41,0xc6,0x5e,0x59,0x0e,0x09,0xda,0x32,0x75,0x60,0x0c,0x2f,0x09,0xb8,0x36,0x77,0x93,0xa9,0xac,0xa3,0xdb,0x71,0xcc,0x30,0xc5,0x81,0x79,0xec,0x3e,0x87,0xc1,0x4c,0x01,0xd5,0xc1,0xf3,0x43,0x4f,0x1d,0x87};
    NSUInteger length = 82;
    
    XCTAssertEqualObjects(
        [[NSData dataWithBytes: ikm length: sizeof ikm] deriveHKDFSHA256KeyWithSalt: [NSData dataWithBytes: salt length: sizeof salt] contextInfo: [NSData dataWithBytes: info length: sizeof info] length: length],
        [NSData dataWithBytes: okm length: sizeof okm]
    );
}

- (void) testHDKFSHA256TestVector3
{
    unsigned char ikm[] = {0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b};
    unsigned char salt[] = {};
    unsigned char info[] = {};
    unsigned char okm[] = {0x8d,0xa4,0xe7,0x75,0xa5,0x63,0xc1,0x8f,0x71,0x5f,0x80,0x2a,0x06,0x3c,0x5a,0x31,0xb8,0xa1,0x1f,0x5c,0x5e,0xe1,0x87,0x9e,0xc3,0x45,0x4e,0x5f,0x3c,0x73,0x8d,0x2d,0x9d,0x20,0x13,0x95,0xfa,0xa4,0xb6,0x1a,0x96,0xc8};
    NSUInteger length = 42;
    
    XCTAssertEqualObjects(
        [[NSData dataWithBytes: ikm length: sizeof ikm] deriveHKDFSHA256KeyWithSalt: [NSData dataWithBytes: salt length: sizeof salt] contextInfo: [NSData dataWithBytes: info length: sizeof info] length: length],
        [NSData dataWithBytes: okm length: sizeof okm]
    );
}

// Taken from https://wiki.mozilla.org/Identity/AttachedServices/KeyServerProtocol#main-KDF

- (void) testHDKFSHA256TestVectorPiCL
{
    unsigned char ikm[] = {0xc1,0x6d,0x46,0xc3,0x1b,0xee,0x24,0x2c,0xb3,0x1f,0x91,0x6e,0x9e,0x38,0xd6,0x0b,0x76,0x43,0x1d,0x3f,0x53,0x04,0x54,0x9c,0xc7,0x5a,0xe4,0xbc,0x20,0xc7,0x10,0x8c};
    unsigned char salt[] = {0x00,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x4d};
    unsigned char info[] = {0x69,0x64,0x65,0x6e,0x74,0x69,0x74,0x79,0x2e,0x6d,0x6f,0x7a,0x69,0x6c,0x6c,0x61,0x2e,0x63,0x6f,0x6d,0x2f,0x70,0x69,0x63,0x6c,0x2f,0x76,0x31,0x2f,0x6d,0x61,0x69,0x6e,0x4b,0x44,0x46};
    unsigned char okm[] = {0x00,0xf9,0xb7,0x18,0x00,0xab,0x53,0x37,0xd5,0x11,0x77,0xd8,0xfb,0xc6,0x82,0xa3,0x65,0x3f,0xa6,0xda,0xe5,0xb8,0x76,0x28,0xee,0xec,0x43,0xa1,0x8a,0xf5,0x9a,0x9d,0x6e,0xa6,0x60,0xbe,0x9c,0x89,0xec,0x35,0x53,0x97,0xf8,0x9a,0xfb,0x28,0x2e,0xa0,0xbf,0x21,0x09,0x57,0x60,0xc8,0xc5,0x00,0x9b,0xbc,0xc8,0x94,0x15,0x5b,0xbe,0x2a};
    NSUInteger length = 64;
    
    XCTAssertEqualObjects(
        [[NSData dataWithBytes: ikm length: sizeof ikm] deriveHKDFSHA256KeyWithSalt: [NSData dataWithBytes: salt length: sizeof salt] contextInfo: [NSData dataWithBytes: info length: sizeof info] length: length],
        [NSData dataWithBytes: okm length: sizeof okm]
    );
}


//- (void) testHDKFSHA256Expand1
//{
//	unsigned char prkBytes[32] = {
//		0x07, 0x77, 0x09, 0x36, 0x2c, 0x2e, 0x32, 0xdf, 0x0d, 0xdc, 0x3f, 0x0d, 0xc4, 0x7b, 0xba, 0x63,
//		0x90, 0xb6, 0xc7, 0x3b, 0xb5, 0x0f, 0x9c, 0x31, 0x22, 0xec, 0x84, 0x4a, 0xd7, 0xc2, 0xb3, 0xe5
//	};
//	
//	NSData* prk = [NSData dataWithBytes: prkBytes length: 32];
//
//	unsigned char infoBytes[10] = {
//		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9
//	};
//	
//	NSData* info = [NSData dataWithBytes: infoBytes length: 10];
//		
//	unsigned char expectedBytes[42] = {
//		0x3c, 0xb2, 0x5f, 0x25, 0xfa, 0xac, 0xd5, 0x7a, 0x90, 0x43, 0x4f, 0x64, 0xd0, 0x36, 0x2f, 0x2a,
//		0x2d, 0x2d, 0x0a, 0x90, 0xcf, 0x1a, 0x5a, 0x4c, 0x5d, 0xb0, 0x2d, 0x56, 0xec, 0xc4, 0xc5, 0xbf,
//		0x34, 0x00, 0x72, 0x08, 0xd5, 0xb8, 0x87, 0x18, 0x58, 0x65
//	};
//
//	NSData* expected = [NSData dataWithBytes: expectedBytes length: 42];
//	
//	//
//	
//	NSData* result = [prk deriveHKDFSHA256KeyWithInfo: info length: 42];
//	XCTAssertNotNil(result, @"");
//	XCTAssertEqualObjects(result, expected, @"");
//}
//
//- (void) testHDKFSHA256Expand2
//{
//	unsigned char prkBytes[32] = {
//		0x06, 0xa6, 0xb8, 0x8c, 0x58, 0x53, 0x36, 0x1a, 0x06, 0x10, 0x4c, 0x9c, 0xeb, 0x35, 0xb4, 0x5c,
//		0xef, 0x76, 0x00, 0x14, 0x90, 0x46, 0x71, 0x01, 0x4a, 0x19, 0x3f, 0x40, 0xc1, 0x5f, 0xc2, 0x44
//	};
//	
//	NSData* prk = [NSData dataWithBytes: prkBytes length: 32];
//
//	unsigned char infoBytes[80] = {
//		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
//		0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
//		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
//		0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
//		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
//	};
//	
//	NSData* info = [NSData dataWithBytes: infoBytes length: 80];
//		
//	unsigned char expectedBytes[82] = {
//		0xb1, 0x1e, 0x39, 0x8d, 0xc8, 0x03, 0x27, 0xa1, 0xc8, 0xe7, 0xf7, 0x8c, 0x59, 0x6a, 0x49, 0x34,
//		0x4f, 0x01, 0x2e, 0xda, 0x2d, 0x4e, 0xfa, 0xd8, 0xa0, 0x50, 0xcc, 0x4c, 0x19, 0xaf, 0xa9, 0x7c,
//		0x59, 0x04, 0x5a, 0x99, 0xca, 0xc7, 0x82, 0x72, 0x71, 0xcb, 0x41, 0xc6, 0x5e, 0x59, 0x0e, 0x09,
//		0xda, 0x32, 0x75, 0x60, 0x0c, 0x2f, 0x09, 0xb8, 0x36, 0x77, 0x93, 0xa9, 0xac, 0xa3, 0xdb, 0x71,
//		0xcc, 0x30, 0xc5, 0x81, 0x79, 0xec, 0x3e, 0x87, 0xc1, 0x4c, 0x01, 0xd5, 0xc1, 0xf3, 0x43, 0x4f,
//		0x1d, 0x87
//	};
//
//	NSData* expected = [NSData dataWithBytes: expectedBytes length: 82];
//	
//	//
//	
//	NSData* result = [prk deriveHKDFSHA256KeyWithInfo: info length: 82];
//	XCTAssertNotNil(result, @"");
//	XCTAssertEqualObjects(result, expected, @"");
//}
//
//- (void) testHDKFSHA256Expand3
//{
//	unsigned char prkBytes[32] = {
//		0x19, 0xef, 0x24, 0xa3, 0x2c, 0x71, 0x7b, 0x16, 0x7f, 0x33, 0xa9, 0x1d, 0x6f, 0x64, 0x8b, 0xdf,
//		0x96, 0x59, 0x67, 0x76, 0xaf, 0xdb, 0x63, 0x77, 0xac, 0x43, 0x4c, 0x1c, 0x29, 0x3c, 0xcb, 0x04
//	};
//	
//	NSData* prk = [NSData dataWithBytes: prkBytes length: 32];
//
//	unsigned char infoBytes[0] = {
//	};
//	
//	NSData* info = [NSData dataWithBytes: infoBytes length: 0];
//		
//	unsigned char expectedBytes[42] = {
//		0x8d, 0xa4, 0xe7, 0x75, 0xa5, 0x63, 0xc1, 0x8f, 0x71, 0x5f, 0x80, 0x2a, 0x06, 0x3c, 0x5a, 0x31,
//		0xb8, 0xa1, 0x1f, 0x5c, 0x5e, 0xe1, 0x87, 0x9e, 0xc3, 0x45, 0x4e, 0x5f, 0x3c, 0x73, 0x8d, 0x2d,
//		0x9d, 0x20, 0x13, 0x95, 0xfa, 0xa4, 0xb6, 0x1a, 0x96, 0xc8
//	};
//
//	NSData* expected = [NSData dataWithBytes: expectedBytes length: 42];
//	
//	//
//	
//	NSData* result = [prk deriveHKDFSHA256KeyWithInfo: info length: 42];
//	XCTAssertNotNil(result, @"");
//	XCTAssertEqualObjects(result, expected, @"");
//}

#pragma mark - PBKDF2HMACSHA2

- (void) testPBKDF2HMACSHA256A
{
    NSData *expected = [[NSData alloc] initWithBase16EncodedString: @"120fb6cffcf8b32c43e7225256c4f837a86548c9" options: NSDataBase16DecodingOptionsDefault];
    NSData *actual = [[@"password" dataUsingEncoding: NSUTF8StringEncoding] derivePBKDF2HMACSHA256KeyWithSalt: [@"salt" dataUsingEncoding: NSASCIIStringEncoding] iterations: 1 length: 20];
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual isEqualToData: expected]);
}

- (void) testPBKDF2HMACSHA256B
{
    NSData *expected = [[NSData alloc] initWithBase16EncodedString: @"ae4d0c95af6b46d32d0adff928f06dd02a303f8e" options: NSDataBase16DecodingOptionsDefault];
    NSData *actual = [[@"password" dataUsingEncoding: NSUTF8StringEncoding] derivePBKDF2HMACSHA256KeyWithSalt: [@"salt" dataUsingEncoding: NSASCIIStringEncoding] iterations: 2 length: 20];
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual isEqualToData: expected]);
}

- (void) testPBKDF2HMACSHA256C
{
    NSData *expected = [[NSData alloc] initWithBase16EncodedString: @"c5e478d59288c841aa530db6845c4c8d962893a0" options: NSDataBase16DecodingOptionsDefault];
    NSData *actual = [[@"password" dataUsingEncoding: NSUTF8StringEncoding] derivePBKDF2HMACSHA256KeyWithSalt: [@"salt" dataUsingEncoding: NSASCIIStringEncoding] iterations: 4096 length: 20];
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual isEqualToData: expected]);
}

// This test just takes too long to run
//- (void) testPBKDF2HMACSHA256D
//{
//    NSData *expected = [[NSData alloc] initWithBase16EncodedString: @"cf81c66fe8cfc04d1f31ecb65dab4089f7f179e8" options: NSDataBase16DecodingOptionsDefault];
//    NSData *actual = [[@"password" dataUsingEncoding: NSUTF8StringEncoding] derivePBKDF2HMACSHA256KeyWithSalt: [@"salt" dataUsingEncoding: NSASCIIStringEncoding] iterations: 16777216 length: 20];
//    XCTAssertNotNil(actual);
//    XCTAssertTrue([actual isEqualToData: expected]);
//}

- (void) testPBKDF2HMACSHA256E
{
    NSData *expected = [[NSData alloc] initWithBase16EncodedString: @"348c89dbcbd32b2f32d814b8116e84cf2b17347ebc1800181c" options: NSDataBase16DecodingOptionsDefault];
    NSData *actual = [[@"passwordPASSWORDpassword" dataUsingEncoding: NSUTF8StringEncoding] derivePBKDF2HMACSHA256KeyWithSalt: [@"saltSALTsaltSALTsaltSALTsaltSALTsalt" dataUsingEncoding: NSASCIIStringEncoding] iterations: 4096 length: 25];
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual isEqualToData: expected]);
}

- (void) testPBKDF2HMACSHA256F
{
    NSData *expected = [[NSData alloc] initWithBase16EncodedString: @"89b69d0516f829893c696226650a8687" options: NSDataBase16DecodingOptionsDefault];
    NSData *actual = [[@"pass\0word" dataUsingEncoding: NSUTF8StringEncoding] derivePBKDF2HMACSHA256KeyWithSalt: [@"sa\0lt" dataUsingEncoding: NSASCIIStringEncoding] iterations: 4096 length: 16];
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual isEqualToData: expected]);
}

#pragma mark - SCrypt

- (void) testSCryptStandardTestVectors1
{
    unsigned char expectedBytes[] = {
        0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20, 0x3b, 0x19, 0xca, 0x42,
        0xc1, 0x8a, 0x04, 0x97, 0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8,
        0xdf, 0xdf, 0xfa, 0x3f, 0xed, 0xe2, 0x14, 0x42, 0xfc, 0xd0, 0x06, 0x9d,
        0xed, 0x09, 0x48, 0xf8, 0x32, 0x6a, 0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17,
        0xe8, 0xd3, 0xe0, 0xfb, 0x2e, 0x0d, 0x36, 0x28, 0xcf, 0x35, 0xe2, 0x0c,
        0x38, 0xd1, 0x89, 0x06
    };
    NSData *expected = [NSData dataWithBytes: expectedBytes length: 64];
    
    NSData *actual = [[@"" dataUsingEncoding: NSASCIIStringEncoding] deriveSCryptKeyWithSalt: [@"" dataUsingEncoding: NSASCIIStringEncoding] n:16 r:1 p:1 length:64];
    
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual length] == 64);
    XCTAssertEqualObjects(actual, expected);
}

- (void) testSCryptStandardTestVectors2
{
    unsigned char expectedBytes[] = {
        0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00, 0x78, 0x56, 0xe7, 0x19,
        0x0d, 0x01, 0xe9, 0xfe, 0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30,
        0xe7, 0x73, 0x76, 0x63, 0x4b, 0x37, 0x31, 0x62, 0x2e, 0xaf, 0x30, 0xd9,
        0x2e, 0x22, 0xa3, 0x88, 0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda,
        0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d, 0x83, 0x60, 0xcb, 0xdf,
        0xa2, 0xcc, 0x06, 0x40
    };
    
    NSData *expected = [NSData dataWithBytes: expectedBytes length: 64];
    
    NSData *actual = [[@"password" dataUsingEncoding: NSASCIIStringEncoding]
        deriveSCryptKeyWithSalt: [@"NaCl" dataUsingEncoding: NSASCIIStringEncoding] n:1024 r:8 p:16 length:64];
    
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual length] == 64);
    XCTAssertEqualObjects(actual, expected);
}

- (void) testSCryptStandardTestVectors3
{
    unsigned char expectedBytes[] = {
        0x70, 0x23, 0xbd, 0xcb, 0x3a, 0xfd, 0x73, 0x48, 0x46, 0x1c, 0x06, 0xcd,
        0x81, 0xfd, 0x38, 0xeb, 0xfd, 0xa8, 0xfb, 0xba, 0x90, 0x4f, 0x8e, 0x3e,
        0xa9, 0xb5, 0x43, 0xf6, 0x54, 0x5d, 0xa1, 0xf2, 0xd5, 0x43, 0x29, 0x55,
        0x61, 0x3f, 0x0f, 0xcf, 0x62, 0xd4, 0x97, 0x05, 0x24, 0x2a, 0x9a, 0xf9,
        0xe6, 0x1e, 0x85, 0xdc, 0x0d, 0x65, 0x1e, 0x40, 0xdf, 0xcf, 0x01, 0x7b,
        0x45, 0x57, 0x58, 0x87
    };
    
    NSData *expected = [NSData dataWithBytes: expectedBytes length: 64];
    
    NSData *actual = [[@"pleaseletmein" dataUsingEncoding: NSASCIIStringEncoding]
        deriveSCryptKeyWithSalt: [@"SodiumChloride" dataUsingEncoding: NSASCIIStringEncoding] n:16384 r:8 p:1 length:64];
    
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual length] == 64);
    XCTAssertEqualObjects(actual, expected);
}

// This test uses too much memory to run on the device
//- (void) testSCryptStandardTestVectors4
//{
//    unsigned char expectedBytes[] = {
//        0x21, 0x01, 0xcb, 0x9b, 0x6a, 0x51, 0x1a, 0xae, 0xad, 0xdb, 0xbe, 0x09,
//        0xcf, 0x70, 0xf8, 0x81, 0xec, 0x56, 0x8d, 0x57, 0x4a, 0x2f, 0xfd, 0x4d,
//        0xab, 0xe5, 0xee, 0x98, 0x20, 0xad, 0xaa, 0x47, 0x8e, 0x56, 0xfd, 0x8f,
//        0x4b, 0xa5, 0xd0, 0x9f, 0xfa, 0x1c, 0x6d, 0x92, 0x7c, 0x40, 0xf4, 0xc3,
//        0x37, 0x30, 0x40, 0x49, 0xe8, 0xa9, 0x52, 0xfb, 0xcb, 0xf4, 0x5c, 0x6f,
//        0xa7, 0x7a, 0x41, 0xa4
//    };
//    
//    NSData *expected = [NSData dataWithBytes: expectedBytes length: 64];
//    
//    NSData *actual = [[@"pleaseletmein" dataUsingEncoding: NSASCIIStringEncoding]
//        deriveSCryptKeyWithSalt: [@"SodiumChloride" dataUsingEncoding: NSASCIIStringEncoding] n:1048576 r:8 p:1 length:64];
//    
//    XCTAssertNotNil(actual);
//    XCTAssertTrue([actual length] == 64);
//    XCTAssertEqualObjects(actual, expected);
//}

- (void) testSCryptKeyServerTestVector
{
    unsigned char inputBytes[] = {
        0xf8,0x49,0x13,0xe3,0xd8,0xe6,0xd6,0x24,0x68,0x9d,0x0a,0x3e,0x96,0x78,0xac,0x8d,
        0xcc,0x79,0xd2,0xc2,0xf3,0xd9,0x64,0x14,0x88,0xcd,0x9d,0x6e,0xf6,0xcd,0x83,0xdd
    };
    NSData *input = [NSData dataWithBytes: inputBytes length: 32];

    unsigned char expectedBytes[] = {
        0x5b,0x82,0xf1,0x46,0xa6,0x41,0x26,0x92,0x3e,0x41,0x67,0xa0,0x35,0x0b,0xb1,0x81,
        0xfe,0xba,0x61,0xf6,0x3c,0xb1,0x71,0x40,0x12,0xb1,0x9c,0xb0,0xbe,0x01,0x19,0xc5
    };
    NSData *expected = [NSData dataWithBytes: expectedBytes length: 32];
    
    NSData *actual = [input deriveSCryptKeyWithSalt: [@"identity.mozilla.com/picl/v1/scrypt" dataUsingEncoding: NSASCIIStringEncoding]
        n:64*1024 r:8 p:1 length:32];
    
    XCTAssertNotNil(actual);
    XCTAssertTrue([actual length] == 32);
    XCTAssertEqualObjects(actual, expected);
}

@end
